<#
.SYNOPSIS
  使用 PowerShell 的正则表达式解析 .rb 文件中的 describe 块，并提取所有 it、its 语句。

.DESCRIPTION
  1. 首先读取整个文件内容（-Raw，便于多行处理）。
  2. 用正则获取所有的 describe 块：正则模式捕获 "describe ... do ... end"。
  3. 对每个 describe 块中的代码，用正则提取:
     - it { ... }
     - its('something') { ... }

.EXAMPLE
  PS C:\> .\Parse-Inspec-Describe.ps1 -Path .\controls.rb
#>

param(
    [Parameter(Mandatory=$true, HelpMessage="请指定包含 InSpec 控制文件的路径")]
    [string]$Path
)

if (!(Test-Path $Path)) {
    Write-Host "文件 $Path 不存在。请确认路径正确。"
    return
}

# 读取整个文件为单个字符串（-Raw 便于多行匹配）
$fileContent = Get-Content -Path $Path -Raw

# 第一步：匹配所有的 describe ... do ... end 块
#   - (?ms) 启用多行和单行模式:
#       (?m) 让 ^ 和 $ 匹配每一行的开头和结尾
#       (?s) 让 '.' 匹配换行符
#   - ^\s*describe\s+(?<resource>.*?)\s+do\s* : 从行首开始，匹配 describe + 资源名 + do
#   - (?<body>.*?) : 尽可能少地匹配描述块内部的所有字符
#   - \s*end : 直到遇到行首或行尾的 end
$describePattern = '(?ms)^\s*describe\s+(?<resource>.*?)\s+do\s*(?<body>.*?)^\s*end\s*'

$describeMatches = [regex]::Matches($fileContent, $describePattern)

if ($describeMatches.Count -eq 0) {
    Write-Host "未匹配到任何 describe 块。"
    return
}

# 准备用于匹配 it / its 的正则表达式：
# 示例：
#   it { should exist }
#   its('mode') { should cmp '0644' }
#
# 对于 it { ... }：
#   - ^\s*it\s*\{(?<itBody>[^}]*)\}      (简单匹配，跨多行需更复杂)
#
# 对于 its('X') { ... }：
#   - ^\s*its\s*\(\s*['"]?(?<itsField>[^'"\)]+)['"]?\)\s*\{\s*(?<itsBody>[^}]+)\}
#
# 这里为了演示简洁，将这两种写法分成两个独立正则分别匹配。
$itPattern  = '(?m)^\s*it\s*\{\s*(?<itBody>[^}]*)\}'
$itsPattern = '(?m)^\s*its\s*\(\s*["'']?(?<itsField>[^"'\)]+)["'']?\)\s*\{\s*(?<itsBody>[^}]*)\}'

# 最终存储结果的数组
$parsedResult = @()

foreach ($descMatch in $describeMatches) {
    # describe 后面捕获的资源字符串
    $resourceName = $descMatch.Groups['resource'].Value.Trim()
    # describe 块中的具体内容
    $blockContent = $descMatch.Groups['body'].Value

    # 在这个 blockContent 里寻找所有 it 和 its 语句
    $itMatches  = [regex]::Matches($blockContent, $itPattern)
    $itsMatches = [regex]::Matches($blockContent, $itsPattern)

    # 构造一个对象来存储解析信息
    $describeObject = [PSCustomObject]@{
        ResourceName = $resourceName
        ItList       = @()
        ItsList      = @()
    }

    # 将匹配到的 it { ... } 加入结果
    foreach ($m in $itMatches) {
        $describeObject.ItList += ,$m.Groups['itBody'].Value.Trim()
    }

    # 将匹配到的 its('...') { ... } 加入结果
    foreach ($m in $itsMatches) {
        $field = $m.Groups['itsField'].Value.Trim()
        $body  = $m.Groups['itsBody'].Value.Trim()
        $describeObject.ItsList += ,([PSCustomObject]@{
            ItsField = $field
            Body     = $body
        })
    }

    $parsedResult += $describeObject
}

# 可以直接输出，也可以用表格展示
$parsedResult | ForEach-Object {
    $_
}
# 使用双引号把整个正则表达式括起来
# 然后在字符类里对双引号进行转义 \" ，
# 同时保留单引号 ' （它在双引号字符串里不需要转义）。
# 在 PowerShell 中，^\s*、\{、\} 等元字符同样生效，不需要额外处理。

$itsPattern = "(?m)^\s*its\s*\(\s*[\"']?(?<itsField>[^\"'\)]+)[\"']?\)\s*\{\s*(?<itsBody>[^}]*)\}"

$itsPattern = "(?m)^\\s*its\\s*\\(\\s*[\"']?(?<itsField>[^\"'\\)]+)[\"']?\\)\\s*\\{\\s*(?<itsBody>[^}]*)\\}"


# 单引号 Here-String的语法是 @' ... '@
# 注意必须单独占行结束
# 在这个范围内，所有字符都被视为字面量（除了换行作为内容）
# 所以你几乎不需要任何转义。
$itsPattern = @'
(?m)^\s*its\s*\(\s*["']?(?<itsField>[^"'\)]+)["']?\)\s*\{\s*(?<itsBody>[^}]*)\}
'@

# 查看结果
Write-Host "Pattern is:`n$itsPattern"
