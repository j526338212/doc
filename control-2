<#
.SYNOPSIS
  解析 Chef InSpec Profile 中的 control block，并抽取:
    - impact
    - title
    - desc
    - tag
    - 形如 input('custom_var', value: 'xxx') 的自定义变量
    - 任意变量名的 Ruby 数组（例如 foo = ["a","b"], bar = ["x","y"] 等）

.PARAMETER FilePath
  指定要解析的 InSpec Profile 文件路径。

.EXAMPLE
  .\Parse-InSpecControl.ps1 -FilePath .\controls\example.rb

.NOTES
  本脚本使用正则来解析 Ruby 语法（有局限性），
  更复杂的场景可借助 AST 或 Ruby 解析器。
#>

param (
    [Parameter(Mandatory=$true)]
    [string]$FilePath
)

try {
    # 读取文件内容（-Raw 一次性返回整串文本）
    $fileContent = Get-Content -Path $FilePath -Raw
}
catch {
    Write-Error "无法读取文件：$FilePath"
    return
}

# 1) 匹配所有的 control block
$controlPattern = '(?s)control\s+[\'"]([^\'"]+)[\'"]\s+do(.*?)end'
$controls = [System.Text.RegularExpressions.Regex]::Matches($fileContent, $controlPattern)

if ($controls.Count -eq 0) {
    Write-Host "未发现任何 control block."
    return
}

# 用于存储最终结果
$parsedResults = @()

foreach ($control in $controls) {

    $controlName = $control.Groups[1].Value  # control 'xxx' 的名字
    $controlBody = $control.Groups[2].Value  # control 块内部内容

    # ———— 解析 impact ————
    $impactPattern = 'impact\s+([\d\.]+)'
    $impactMatch = [Regex]::Match($controlBody, $impactPattern)
    $impact = if ($impactMatch.Success) { $impactMatch.Groups[1].Value } else { '' }

    # ———— 解析 title ————
    $titlePattern = 'title\s+[\'"]([^\'"]+)[\'"]'
    $titleMatch = [Regex]::Match($controlBody, $titlePattern)
    $title = if ($titleMatch.Success) { $titleMatch.Groups[1].Value } else { '' }

    # ———— 解析 desc ————
    $descPattern = 'desc\s+[\'"]([^\'"]+)[\'"]'
    $descMatch = [Regex]::Match($controlBody, $descPattern)
    $desc = if ($descMatch.Success) { $descMatch.Groups[1].Value } else { '' }

    # ———— 解析 tag ————
    $tagList = @()
    $tagPattern = '(?m)^\s*tag\s+(.*)$'
    $tagMatches = [Regex]::Matches($controlBody, $tagPattern)
    foreach ($tagItem in $tagMatches) {
        $innerTagString = $tagItem.Groups[1].Value.Trim()

        # 判断 tag 'key': 'value' 形式
        if ($innerTagString -match "([\"'])([^\"']+)\1\s*:\s*([\"'])([^\"']+)\3") {
            $key = $Matches[2]
            $val = $Matches[4]
            $tagList += "$key=$val"
        }
        else {
            # 否则处理 tag 'xxx', 'yyy' 形式
            $cleanedTag = $innerTagString.Trim(" ", "'", "`", ",", "`t", "`n")
            $splitTags = $cleanedTag -split '\s*,\s*'
            foreach ($t in $splitTags) {
                $tagList += $t.Trim(" '")
            }
        }
    }

    # ———— 解析 InSpec 自定义变量 input('xxx', value: 'xxx') ————
    $inputPattern = "input\s*\(\s*['""]([^'""]+)['""]\s*,\s*value:\s*['""]([^'""]+)['""]"
    $inputMatches = [Regex]::Matches($controlBody, $inputPattern)
    $customInputs = @{}
    foreach ($m in $inputMatches) {
        $varName = $m.Groups[1].Value
        $varValue = $m.Groups[2].Value
        $customInputs[$varName] = $varValue
    }

    # ———— 解析任意 Ruby 数组变量 varName = ["val1","val2"] ————
    # 捕获形如 foo = ["bar","baz"] 这样的模式，多行也可以用 ?s
    # group[1] => foo  (变量名)
    # group[2] => "bar","baz" (变量值整体)
    $arrayVarPattern = '(?m)([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*\[\s*(.*?)\s*\]'
    $allArrayMatches = [Regex]::Matches($controlBody, $arrayVarPattern)

    $arrayVars = @{}  # 用来存储多个变量及其值

    foreach ($match in $allArrayMatches) {
        $varName     = $match.Groups[1].Value # 变量名
        $arrayString = $match.Groups[2].Value # 数组内部字符串, 例如 "val1","val2"
        
        # 再用另一个正则来匹配每个 "xxx" 形式的字符串
        $innerPattern = '(?:"([^"]+)")'  # 捕获引号内的文本
        $innerMatches = [Regex]::Matches($arrayString, $innerPattern)

        $values = @()
        foreach ($im in $innerMatches) {
            $values += $im.Groups[1].Value
        }
        $arrayVars[$varName] = $values
    }

    # ———— 组装解析结果 ————
    $parsedControl = [PSCustomObject]@{
        ControlName   = $controlName
        Impact        = $impact
        Title         = $title
        Description   = $desc
        Tags          = $tagList -join '; '
        CustomInputs  = $customInputs
        ArrayVars     = $arrayVars
    }
    $parsedResults += $parsedControl
}

Write-Host "`n解析到的控制信息：`n"
foreach ($item in $parsedResults) {
    Write-Host "ControlName : $($item.ControlName)"
    Write-Host "Impact      : $($item.Impact)"
    Write-Host "Title       : $($item.Title)"
    Write-Host "Description : $($item.Description)"
    Write-Host "Tags        : $($item.Tags)"

    Write-Host "`nCustomInputs:"
    foreach ($k in $item.CustomInputs.Keys) {
        Write-Host "  $k = $($item.CustomInputs[$k])"
    }

    Write-Host "`nArrayVars:"
    foreach ($k in $item.ArrayVars.Keys) {
        $vals = $item.ArrayVars[$k] -join ', '
        Write-Host "  $k = [$vals]"
    }

    Write-Host "-----------------------------------------`n"
}

return $parsedResults
